% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cfsens_mgn.R
\name{cfsens_mgn}
\alias{cfsens_mgn}
\title{Sensitivity analysis of individual treatment effect with marginal guarantee}
\usage{
cfsens_mgn(
  X,
  Y,
  T,
  alpha,
  null_type = c("sharp", "negative", "positive"),
  score_type = c("cqr"),
  ps_fun = regression_forest,
  ps = NULL,
  pred_fun = quantile_forest,
  train_prop = 0.75,
  train_id = NULL
)
}
\arguments{
\item{X}{covariates.}

\item{Y}{the observed outcome vector.}

\item{T}{the vector of treatment assignments.}

\item{alpha}{the target confidence level.}

\item{null_type}{the null to be tested that takes value in \{"sharp", "negative", "positive"\}. See Details.}

\item{score_type}{the type of nonconformity scores. The default is "cqr".}

\item{ps_fun}{a function that models the treatment assignment mechanism. The default is "regression_forest".}

\item{ps}{a vector of propensity score. The default is \code{NULL}.}

\item{pred_fun}{a function that models the potential outcome conditional on the covariates. The default is "quantile_forest".}

\item{train_prop}{proportion of units used for training. The default is 75\\%.}

\item{train_id}{The index of the units used for training. The default is \code{NULL}.}
}
\value{
an \code{itemgn} object.
}
\description{
\code{cfsens_mgn} conducts sensitivity analysis of individual treatment effects
with the marginal guarantee.
It currently supports testing the sharp null and the directional nulls.
}
\details{
When \code{null_type = "sharp"}, the null hypothesis is H_0: Y(1) - Y(0) = 0.
When \code{null_type = "negative"}, the null hypothesis is H_0: Y(1) - Y(0) <= 0.
When \code{null_type = "positive"}, the null hypothesis is H_0: Y(1) - Y(0) >= 0.
}
\examples{
\donttest{
## Data generating model
data_model <- function(n, p, Gamma, seed){
 set.seed(seed)
 beta <- matrix(c(-0.531,0.126,-0.312,0.018,rep(0,p-4)), nrow=p)
 X <- matrix(runif(n * p), n, p)
 U <- rnorm(n) * abs(1 + 0.5 * sin(2.5 * X[,1]))
 Y1 <-  X \%*\% beta + U
 Y0 <- X \%*\% beta - U
 prop.x <- exp(X \%*\% beta) / (1 + exp(X \%*\% beta))
 p.x <- 1-(1/(prop.x + (1-prop.x)/Gamma ) -1)/( 1/(prop.x + (1-prop.x)/Gamma) - 1/(prop.x + Gamma*(1-prop.x)))
 t.x <- qnorm(1-p.x/2) * abs(1+0.5*sin(2.5*X[,1]))
 prop.xu <- (prop.x/(prop.x+Gamma*(1-prop.x)))*(abs(U)<=t.x) + (prop.x/(prop.x+ (1-prop.x)/Gamma))*(abs(U)>t.x)
 TT <- rbinom(n, size=1, prob=prop.xu)
 Y <- TT * Y1 + (1 - TT) * Y0
 return(list(Y1 = Y1, Y0 = Y0, Y = Y, X = X, T = TT))
}

## Generate confounded training data
n <- 1000
n_test <- 5
p <- 10
Gamma <- 1.5
data <- data_model(n, p, Gamma, 2021)

## Generate confounded test data
test <- data_model(n_test, p, Gamma, 2022)

## Run sensitivity analysis with marginal guarantee
## grf pacakge needs to be installed
alpha <- 0.2
res <- cfsens_mgn(data$X, data$Y, data$T, 
                  alpha = alpha, null_type = "negative", 
                  ps_fun = regression_forest, 
                  pred_fun = quantile_forest)
out_res <- predict(res, test$X, Y1_test = test$Y1, type = "att")
out_res
}
}
\seealso{
\code{\link{cfsens_pac}}
}
